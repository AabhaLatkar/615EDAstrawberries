---
title: "Stawberries: exploratory data analysis"
author: MA615
date: 2023 Oct 11
format: html
engine: knitr
---
---
#I have given up on strawberries ever since we started to analyse this dataset in class and I am sure I am not alone. The chemicals that go into the growing of strawberries are bad even if they are just slightly hazardous rather than hazardous. The solution was to buy organic strawberries- but that is just a tiny bit difficult on a student budget. It is crazy that they make you pay if you don't want to get cancer, but I wanted to see how much this was feasible.

#I wanted my EDA to focus on the production, price and availability of organic strawberries for the average consumer.The plan was to make plots showing how the production and sales of organic produce has changed over the years (especially after covid as people became more health consious). I also wanted to check if organic strawberries had gotten cheaper over the years or not.


#Data Acquisition and Assessment
#The data for this analysis was acquired from the USDA National Agricultural Statistics Service (NASS) QuickStats database [1]. The specific data set covers production and sales statistics for strawberries across 47 U.S. states from 2010-2021 [2].

#The data is organized by state, with separate rows for each year and measurement type (e.g. area harvested, yield per acre, total production, sales). There are two sections - Census data collected every 5 years, and Survey data collected annually.


#I started from and used a lot of Haviland's code for cleaning. I modified it wherever I needed to for the analysis. I also used chatgpt to troubleshoot and sometimes debug my code.
---
```{r}
#| label: Load libraries
#| warning: false
#| message: false
#| echo: false

library(knitr)  
library(kableExtra)
library(tidyverse)
library(stringr)
```

<!-- Read the file -->

```{r warning=FALSE, message=FALSE}
#| label: read data - glimpse 
#| warning: false
#| message: false
#| echo: false

strawberry <- read_csv("strawberry(1) (1).csv", col_names = TRUE)

# glimpse(strawberry)
```

<!-- Remove columns with a single value in all columns -->

```{r}
#| label: drop one-item columns
#| echo: false

## define function
drop_one_value_col <- function(df){
col_name <- NULL
col_val <- NULL
suppressWarnings({
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
  col_name = c(col_name, colnames(df[i]))
  col_val = c(col_val, df[1,i])  
} }
})

if(is.null(col_name)){return("No Columns to drop")}else{
   col_val = unlist(col_val)
   attributes(col_val) = NULL
   drp = data.frame(col_name, col_val)
   return(drp)
   }
}

str <- drop_one_value_col(strawberry)

# str |> kable(caption = "Dropped Single-Value Columns: names and values")

str <- str$col_name

strawberry <- strawberry |> select(!all_of(str))

```

<!-- ## Examine the data. How is it organized? -->

```{r}
#| label: examine rows
#| echo: false

state_all <- strawberry |> group_by(State) |> count()
```



```{r}
strwb_census <- strawberry |> filter(Program == "CENSUS")

strwb_survey <- strawberry |> filter(Program == "SURVEY")
```



```{r}
#| label: split Data Item
#| echo: false

  strwb_census <- strwb_census |>
  separate_wider_delim(  cols = `Data Item`,
                         delim = ",",
                         names = c("Fruit",
                                 "temp1",
                                 "temp2",
                                 "temp3"),
                         too_many = "error",
                         too_few = "align_start"
                       )


strwb_census <- strwb_census |>
  separate_wider_delim(  cols = temp1,
                         delim = " - ",
                         names = c("crop_type",
                                 "prop_acct"),
                         too_many = "error",
                         too_few = "align_start"
                       )


strwb_census$crop_type <- str_trim(strwb_census$crop_type, side = "both")

strwb_census$temp2 <- str_trim(strwb_census$temp2, side = "both")

strwb_census$temp3 <- str_trim(strwb_census$temp3, side = "both")
```

<!-- ## Create a "Fresh Market" column -->
```{r}
#| label: create a fresh market column
#| echo: false
#| eval: true

## make a copy of the temp2 column named `Fresh Market`.
strwb_census <- strwb_census |> mutate(`Fresh Market` = temp2, .after = temp2)

## Remove cells in `Fresh Market` column 
##   that begin "MEASURED"
strwb_census$`Fresh Market` <- strwb_census$`Fresh Market` |> str_replace( "^MEA.*", "")

## Remove cells in `Fresh Market` column 
##   that begin "PROCESSING" 
strwb_census$`Fresh Market` <- strwb_census$`Fresh Market` |> str_replace( "^P.*", "")

## substitute a space for NA in `Fresh Market` column
strwb_census$`Fresh Market`[is.na(strwb_census$`Fresh Market`)] <- ""  

## in temp2 column, remove cells that begin "FRESH"
 strwb_census$temp2 <- strwb_census$temp2 |> str_replace("^F.*", "")

## Now fix the entries in the `Fresh Market` column
##   Remove "FRESH MARKET - " from the cells
strwb_census$`Fresh Market` <- strwb_census$`Fresh Market` |> str_replace("^FRESH MARKET - ", "")

```

<!-- ## Create a "Process Market" column -->

```{r}
#| label: make process market column
#| echo: false

## Make a copy of temp2 named `Process Market`
strwb_census <- strwb_census |> mutate(`Process Market` = temp2, .after = temp2)

## remove `Process Market` cells beginning "MEASURED"
strwb_census$`Process Market` <-  strwb_census$`Process Market` |> str_replace("^MEA.*", "")

## substitute space for NA in `Process Market` column
strwb_census$`Process Market`[is.na(strwb_census$`Process Market`)] <- ""

## In temp2, remove cells that begin "PROCESSING"
strwb_census$temp2 <- strwb_census$temp2 |> str_replace("^P.*", "")

## In `Processing Market`, remove "PROCESSING - " from cells
strwb_census$`Process Market` <-  strwb_census$`Process Market` |> str_replace("PROCESSING - ", "") 


```

<!-- Remove NA's from prop_acct, temp2, and temp3 -->

```{r}
#| label: remove NAs
#| echo: false

## substitute a space for NA in prop_acct column
strwb_census$prop_acct[is.na(strwb_census$prop_acct)] <- "" 

## substitute a space for NA in temp2 column
strwb_census$temp2[is.na(strwb_census$temp2)] <- "" 

## substitute a space for NA in temp2 column
strwb_census$temp3[is.na(strwb_census$temp3)] <- "" 
```



```{r}
#| label: final cleanup
#| echo: false

strwb_census <- strwb_census |> unite(temp2, temp3, col="Metric", sep="")

## Now fix the entries in the Metric column
##   Remove "MEASURED IN " from the cells
strwb_census$Metric <- strwb_census$Metric |> str_replace("MEASURED IN ", "")

## move Metric to the end
strwb_census <- strwb_census |> relocate(Metric, .before = Domain)

strwb_census <- strwb_census |> relocate(`Process Market`, .before = Metric)

strwb_census <- strwb_census |> rename(Totals = prop_acct)

```

<!-- ## The Value column transformation -->

```{r}
#| label: define functions dcomma and footnote finder
#| echo: false
#| warning: false
#| message: false
#| eval: true

vals <- strwb_census$Value

g1 <- sub(",", "", vals)

g2 <- gsub(",", "", vals)

a <- vals |> str_detect(",")

b <- vals |> str_replace(",", "")

c <- vals |> str_replace_all(",", "")

c <- as.numeric(c)

### remove commas from Value entries
dcomma <- function(c){
  x_new <- as.numeric(gsub(",", "", c))
  return(x_new)
}

v <- strwb_census$Value

fn_i <- v |> str_detect("^\\([:upper:]\\)$") ## returns


## dcomma returns numbers and NA's
v1 <- dcomma(v)

## locations of NA's
na_i <- is.na(v1)

dcomma <- function(c){
  suppressWarnings({
  xnew = as.numeric(gsub(",", "", c))
  fns = unique(c[is.na(xnew)])
  vtran = list("new_vec" = xnew, "footnotes" = fns)
  return(vtran)
  })
}
 
v_trns <- dcomma(v)

 a <- v_trns$new_vec
 
 # v_trns$footnotes
 strwb_census$Value <- a 
strwb_census$Footnotes <- v_trns$footnotes
# Clean Value column 
value_clean = dcomma(strwb_census$Value)

# Assign back to dataset
strwb_census$Value <- value_clean$new_vec  

# Extract footnotes
strwb_census$Footnotes <- value_clean$footnotes
# Replace NA values in the "Value" column with 0
strwb_census$Value[is.na(strwb_census$Value)] <- 0

```



<!-- ## Clean and organize strwb_survey -->

```{r}
#| label: period column 
#| echo: false

per_c <- strwb_survey |> select(Period) |> distinct()
per_c <- unlist(per_c)
```

<!-- data item -->

```{r}
#| label: data item analysis
#| echo: false


## columns need descriptive names

strwb_survey <- strwb_survey |> 
  separate_wider_delim(  cols = `Data Item`,
                         delim = "MEASURED IN",
                         names = c("temp1",
                                 "measurement"),
                         too_many = "error",
                         too_few = "align_start"
                       )

strwb_survey <- strwb_survey |>
  separate_wider_delim(  cols = temp1,
                         delim = " - ",
                         names = c("crop_type",
                                 "prop_acct"),
                         too_many = "error",
                         too_few = "align_start"
                       )
strwb_survey$crop_type <- str_trim(strwb_survey$crop_type, side = "both")

strwb_survey$measurement <- str_trim(strwb_survey$measurement, side = "both")
```

<!-- Domain -->

```{r}
#| label: domain
#| echo: false
#| eval: true

strwb_survey <- strwb_survey |>
  separate_wider_delim(  cols = Domain,
                         delim = ",",
                         names = c("temp22",
                                 "temp23"),
                         too_many = "error",
                         too_few = "align_start"
                       )

t22 <- unique(strwb_survey$temp22)

t23 <- unique(strwb_survey$temp23)
```

<!-- Domain Category -->

```{r}
#| label: Domain Category
#| echo: false
#| eval: true


strwb_survey <- strwb_survey |>
  separate_wider_delim(  cols = `Domain Category`,
                         delim = ",",
                         names = c("temp42",
                                 "temp43",
                                 "temp44",
                                 "temp45"),
                         too_many = "error",
                         too_few = "align_start"
                       )




##  VALUE CLEANING

val <- strwb_survey$Value

g1 <- sub(",", "", val)

g2 <- gsub(",", "", val)

a <- val |> str_detect(",")

b <- val |> str_replace(",", "")

c <- val |> str_replace_all(",", "")

c <- as.numeric(c)

### remove commas from Value entries
dcomma <- function(c){
  x_new <- as.numeric(gsub(",", "", c))
  return(x_new)
}

v <- as.numeric(strwb_survey$Value)

fn_i <- v |> str_detect("^\\([:upper:]\\)$") ## returns

## dcomma returns numbers and NA's
v1 <- dcomma(v)

## locations of NA's
na_i <- is.na(v1)

dcomma <- function(c){
  suppressWarnings({
  xnew = as.numeric(gsub(",", "", c))
  fns = unique(c[is.na(xnew)])
  vtran = list("new_vec" = xnew, "footnotes" = fns)
  return(vtran)
  })
}
 
v_trns <- dcomma(v)
 
a <- v_trns$new_vec

# Clean Value column 
value_clean = dcomma(strwb_survey$Value)

# Assign back to dataset
strwb_survey$Value <- value_clean$new_vec  

# Replace NA values in the "Value" column with 0
strwb_survey$Value[is.na(strwb_survey$Value)] <- 0

strwb_survey_chem <- strwb_survey |> filter((temp22 == "CHEMICAL") | (temp42 == "CHEMICAL"))

strwb_survey_mkt <- strwb_survey |> filter(!((temp22 == "CHEMICAL") | (temp42 == "CHEMICAL")))
```



```{r}
chem1 <-  drop_one_value_col(strwb_survey_chem)

mkt1 <- drop_one_value_col(strwb_survey_mkt)

strwb_survey_mkt <- strwb_survey_mkt |> 
  separate_wider_delim(  cols = `crop_type`,
                         delim = ",",
                         names = c("crop","type"),
                         too_many = "merge",
                         too_few = "align_start"
                       )
strwb_survey_mkt <- strwb_survey_mkt |> 
  separate_wider_delim(  cols = `type`,
                         delim = ",",
                         names = c("typ","temp1"),
                         too_many = "merge",
                         too_few = "align_start"
                       )

# mkt1 |> kable(caption = "droping 1-value cols - mkt")

```

```{r}
# Delete the "temp44" and "temp45" columns
 strwb_survey_chem<- strwb_survey_chem[, !(colnames(strwb_survey_chem) %in% c("temp44", "temp45", "temp23"))]
strwb_survey_chem <- separate(strwb_survey_chem, "temp43", into = c("Pest", "Chemical"), sep=":")
strwb_survey_chem <- separate(strwb_survey_chem, "Chemical", into = c("Chem", "Number"), sep="=")

strwb_survey_chem$Chem <- str_trim(strwb_survey_chem$Chem, side = "both")

strwb_survey_chem$temp2 <- str_trim(strwb_survey_chem$Number, side = "both")

strwb_survey_chem$Chem <- substr(strwb_survey_chem$Chem, 2, nchar(strwb_survey_chem$Chem))
strwb_survey_chem$Number <- substr(strwb_survey_chem$Number, 1, nchar(strwb_survey_chem$Number) - 1)
strwb_survey_chem<- strwb_survey_chem[, !(colnames(strwb_survey_chem) %in% c("temp42"))]

strwb_survey_chem<- strwb_survey_chem[, !(colnames(strwb_survey_chem) %in% c("temp4", "temp2"))]

strwb_survey_mkt<- strwb_survey_mkt[, !(colnames(strwb_survey_mkt) %in% c("temp44", "temp23", "temp45", "temp43", "temp1"))]

library(readxl)
chemical <- read_excel("chemicalnew - Copy.xlsx")
harm_level <- chemical$harm_level
library(dplyr)
Che <- left_join(strwb_survey_chem, chemical, by = "Chem")

```

#EDA

```{r}
colnames(strawberry)[colnames(strawberry) == "Domain Category"] <- "Category"
colnames(strawberry)[colnames(strawberry) == "Data Item"] <- "Item"

```

```{r}
strwb_census <- strwb_census %>%
  rename(Fresh = `Fresh Market`, Process = `Process Market`)
# Create the dual bar chart
filtered_data <- strwb_census %>%
  filter(Fresh == "SALES" | Process == "SALES")
ggplot(filtered_data, aes(x = State)) +
  geom_bar(aes(y = Fresh, fill = "Fresh Market"), stat = "identity",
            position = "stack") +geom_bar(aes(y = Process, fill = "Process Market"), stat = "identity",
            position = "Stack")
  labs(title = "Dual Bar Chart", y = "Value", fill = "Legend") +
  scale_fill_manual(values = c("Fresh Market" = "blue", "Process Market" = "red"))+
  theme(axis.text.x = element_text(angle= 45,hjust=1,size = 8))
```
#References
[1] USDA National Agricultural Statistics Service, Accessed 2023 Feb 15, https://quickstats.nass.usda.gov

[2] USDA QuickStats, Strawberries, Accessed 2023 Feb 15, https://quickstats.nass.usda.gov/results/45FBC825-B104-38E2-9802-839F5F3C7036


<p style="page-break-before: always">

</p>
